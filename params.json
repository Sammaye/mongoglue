{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mongoglue","tagline":"Another MongoDB ORM","google":"","body":"# Mongoglue ORM\r\n\r\nThis is a very simple ORM designed for MongoDB.\r\n\r\nIt is very much designed a kind of \"My First\" of Active Record handling. Irrespective of that fact this ORM has been extensively tested in a live environment and has been\r\nfound to be quite fitting to security needs in all tested cases.\r\n\r\nA lot of the documentation and examples can be found within the `tests` folder where PHPUnit tests are performed on each section of the ORM. The file `document.php`\r\nand the models in `tests/documents` would be of particular interest to new users.\r\n\r\n## The Why and How of Fry?\r\n\r\nI built this as a personal project to understand how other frameworks do Active Record. This originally started out as a project to work along side Yiis own\r\nActive Record (and does take quite a lot of inspiration from there) to help me to understand how to debug and fix any Yii errors I get.\r\n\r\nWhen I decided to incorporate this as a separate module from that previous project the intention I had in mind was to create an Active Record model slimmer and more transparent\r\nto the driver than Doctrine 2. I suppose you could say I designed this to sit in the middle between the driver and Doctrine 2.\r\n\r\n## The Core\r\n\r\nIt is important to note that not all the files you see in this repository are not actually needed.\r\n\r\nMost of the files contained in here are actually helpers or add-ons for the main core of the ORM. The only files you really need in order to use the core of this ORM are:\r\n\r\n\t/mongoglue/Server.php\r\n\t/mongoglue/Database.php\r\n\t/mongoglue/Cursor.php\r\n\t/mongoglue/Document.php\r\n\t/mongoglue/validators/Base.php\r\n\r\nIf you intend to use behaviours and/or validators it might be good to keep:\r\n\r\n\t/mongoglue/Validator.php\r\n\t/mongoglue/Behaviour.php\r\n\r\nSince these files act as parent classes that your own behaviours etc can inherit and if you end up downloading a behaviour and/or validator from other individuals they might require\r\nthis class.\r\n\r\nEverything else on top is either helpers or just there to make your life a little easier. I will describe most of them here for you.\r\n\r\n### behaviours/Timestamp.php\r\n\r\nA default behaviour you can use to add timestamps to your records. Also shows how behaviours are actually made up and designed.\r\n\r\nNote: This is also used by the PHPUnit tests.\r\n\r\n### validators/tester.php\r\n\r\nA default username tester that uses Regex to test for a alpha numeric username that is 3 - 20 characters in length.\r\n\r\nA good example of how a validator is built.\r\n\r\nNote: This is also used by the PHPUnit tests.\r\n\r\n### tests\r\n\r\nThe tests folder contains a set of tests based around PHPUnit.\r\n\r\nThis folder is invaluable to understanding how to use mongoglue and I would recommend looking through the tests performed in this folder.\r\n\r\n### helpers\r\n\r\nExactly what it says on the tin. This folder has its own readme to tell you what each file does.\r\n\r\n## Using it\r\n\r\nAs I said, I have designed this to quite transparent to the driver itself so lets get an example out:\r\n\r\n\trequire 'mongoglue/Server.php';\r\n\r\n\t$mongo = new mongoglue\\Server(new Mongo()/new MongoClient(), array(\r\n\t\t'documentDir' => dirname(__FILE__).'/mongoglue/tests/documents',\r\n\t\t'documentns' => '\\\\mongoglue\\\\tests\\\\documents'\r\n\t));\r\n\t$db = $mongo->mydb;\r\n\t$test = $db->select('test');\r\n\r\nNote: Please do not copy this block of code. There is an error in it, intentionally.\r\n\r\nYou will see that the first file I include is the `Server` class within the `mongoglue` root. Once this file is there I cna make a new instance of it passing a connection object\r\n(`new Mongo()` and `new MongoClient()` both shown here) with some parameters. I should note that even though the `documentDir` is needed the `documentns` is not unless you have\r\nnamespaced you models, then it is.\r\n\r\nThe `documentDir` should go from the root `/` or `C:\\` (or whatever drive letter you are on) depending on the OS you are on. As an example instead of passing `app/documents` as my\r\n`documentDir` I would actually pass `/srv/workspace/mydomain.co.uk/htdocs/documents`.\r\n\r\nOnce you have your server class you can then use it like you would the native MongoDB driver. Accessing a `__get` on the `Server` class will get a database and accessing a `__get`\r\non the returned `Database` class will get a RAW MongoDB collection (straight from the driver, no active record). In order to use Active Record you can either, as I show above,\r\nuse the `select($myModelName)` function within the `Database` class or you cna use the `__call` to get the model, i.e. `$testCursor = $db->User()->find()`.\r\n\r\nWhen you use the `select` or `__call` abilities wthin the `Database` class both functions will return an instance of `\\mongoglue\\Document` which represents the document itself.\r\n\r\n### Using the Document\r\n\r\n## Documentation notes\r\n\r\nAs I said earlier. A lot of the documentation and examples can be found in various files within the `tests` folder. The `tests` folder is designed to provide a set of standard\r\ntests with full examples of using 99% of the ORMs functionality. The file `document.php` and the models in `tests/documents` would be of particular interest to new users.\r\n"}